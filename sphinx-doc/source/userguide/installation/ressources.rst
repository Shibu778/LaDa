.. _install_pbs_ug:

Setting up the PBS/Slurm ressources
===================================

A ressource manager, such as pbs or slurm, takes care of allocating
supercomputing ressources for submitted jobs. Pylada interfaces with these `via`
a few global data variables:

  - :py:data:`qsub_exe`
  - :py:data:`pbs_string`
  - :py:data:`default_pbs`
  - :py:data:`queues`
  - :py:data:`accounts`
  - :py:data:`debug_queue`

:py:data:`pylada.qsub` defines the executable to submit jobs.

  # openpbs
  qsub_exe = "qsub"
  # slurn
  qsub_exe = "sbatch"

The scripts themselves are defined `via` the `format string`_
:py:data:`pylada.pbs_string`::

  >>> pbs_string =  "#! /bin/bash/\n"\
  ...               "#SBATCH --account={account}\n"\
  ...               "#SBATCH --time={walltime}\n"\
  ...               "#SBATCH -N={nnodes}\n"\
  ...               "#SBATCH -e={err}\n"\
  ...               "#SBATCH -o={out}\n"\
  ...               "#SBATCH -J={name}\n"\
  ...               "#SBATCH -D={directory}\n\n"\
  ...               "python {scriptcommand}\n"

Again, there are few reserved keywords which Pylada will use to fill in the string.

   - account: defines the relevant account to which the calculation is submitted.
   - queue: defines the relevant queue to which the calculation is submitted.
   - walltime: maximum time for which the calculation will run
   - n: Number of processes to run the job on.
   - ppn: Number of processes per node.
   - nnodes: number of nodes the calculation will run. This is generally
     computed from "ppn" and "n".
   - err: Standard error file. Generated by Pylada.
   - out: Standard output file. Generated by Pylada.
   - name: Name of the job. Generated by Pylada.
   - directory: Directory where the job is launched. Generated by Pylada. 
   - scriptcommand: Script to launch. Generated by Pylada.

Most of the keywords are automatically generated by Pylada. Is is for the user to
provide a script where the requisite number of keywords make sense for any
particular ressource manager.  

Default keyword values should be stored in the dictionary
:py:data:`pylada.default_pbs`.

The different queues (accounts) accessible to the users can be listed in
:py:data:`pylada.queues` (:py:data:`pylada.accounts`). These will be made available
to the users `via` :ref:`%launch <ipython_launch_ug>`. If "queue" is not
relevant to a particular supercomputer, :py:data:`pylada.queues` can be set to
the empty tuple.

The debug/interactive queue can be made more easily accessible `via`
:py:data:`pylada.debug_queue`::

  pylada.debug_queue = 'queue', 'debug'

The first item of the tuple is the keyword that should be set to access the
relevant resource. The second is the relevant value. These will differ from
supercomputer to supercomputer. In practice, the first is generally "queue" or
"account", and the second is something like "debug".
                                                     
.. _format string: http://docs.python.org/library/st dtypes.html#str.format
