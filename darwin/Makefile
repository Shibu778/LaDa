# Makefile.in generated by automake 1.7.6d from Makefile.am.
# darwin/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/lamarck
pkglibdir = $(libdir)/lamarck
pkgincludedir = $(includedir)/lamarck
top_builddir = ..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_triplet = i686-pc-linux-gnu
ACLOCAL = ${SHELL} /home/davezac/usr/src/LaDa/missing --run aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/davezac/usr/src/LaDa/missing --run tar
AUTOCONF = ${SHELL} /home/davezac/usr/src/LaDa/missing --run autoconf
AUTOHEADER = ${SHELL} /home/davezac/usr/src/LaDa/missing --run autoheader
AUTOMAKE = ${SHELL} /home/davezac/usr/src/LaDa/missing --run automake-1.7
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
COMPILER_CXXFLAGS =  -ffriend-injection -malign-double
CPP = gcc -E
CPPFLAGS = 
CPP_DEBUG_FLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DODARWIN_FALSE = #
DODARWIN_TRUE = 
DOMPI_FALSE = 
DOMPI_TRUE = #
DOPESCAN_FALSE = #
DOPESCAN_TRUE = 
DOVFF_FALSE = #
DOVFF_TRUE = 
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EO_CFLAGS = -I/home/davezac/usr/include/eo  
EO_FCFLAGS = 
EO_FCLIBS = 
EO_LIBS = -L/home/davezac/usr/lib/ -lga -leo -leoutils  
EXEEXT = 
GSL_INCLUDE = -I /home/davezac/usr/include/gsl
GSL_LIB = -L/home/davezac/usr/lib -lgslcblas -L/home/davezac/usr/lib -lgsl
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lstdc++ -lm -lm 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/davezac/usr/src/LaDa/missing --run makeinfo
MPICH_CFLAGS = 
MPICH_FCFLAGS = 
MPICH_FCLIBS = 
MPICH_LIBS = 
MPI_ADDLIB = 
OBJEXT = o
PACKAGE = lamarck
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
TINYXML_CFLAGS = -I/home/davezac/usr/include  
TINYXML_FCFLAGS = 
TINYXML_FCLIBS = 
TINYXML_LIBS = -L/home/davezac/usr/lib/ -ltinyxml  
VERSION = 0.1
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/davezac/usr/src/LaDa/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
PDARWIN = pdarwin
bin_PROGRAMS = cedarwin $(PDARWIN)
AM_CPPFLAGS =  -ffriend-injection -malign-double -I/home/davezac/usr/include     -I/home/davezac/usr/include/eo  
AM_LDFLAGS = -L/home/davezac/usr/lib/ -ltinyxml   -L/home/davezac/usr/lib/ -lga -leo -leoutils  
cedarwin_SOURCES = main.cc ce.cc
cedarwindir = darwin
nobase_cedarwin_HEADERS = ce.h
cedarwin_CPPFLAGS = -D _CE $(AM_CPPFLAGS) -I .. -I /home/davezac/usr/include/gsl 
cedarwin_LDFLAGS = $(AM_LDFLAGS) -L/home/davezac/usr/lib -lgslcblas -L/home/davezac/usr/lib -lgsl 
cedarwin_LDADD = libdarwin.la ../lamarck/liblamarck.la ../atat/libatat.la 
pdarwin_SOURCES = main.cc pescan.cc
pdarwindir = darwin
nobase_pdarwin_HEADERS = pescan.h
pdarwin_CPPFLAGS = -D _PESCAN $(AM_CPPFLAGS) -I .. -I /home/davezac/usr/include/gsl 
pdarwin_LDFLAGS = $(AM_LDFLAGS) -L/home/davezac/usr/lib -lgslcblas -L/home/davezac/usr/lib -lgsl 
pdarwin_LDADD = libdarwin.la ../lamarck/liblamarck.la ../atat/libatat.la ../vff/libvff.la \
	       	../pescan_interface/libpescan.la ../physics/libphysics.la 

noinst_LTLIBRARIES = libdarwin.la
libdarwin_ladir = darwin
libdarwin_la_SOURCES = concentration.cc print_xmgrace.cc
nobase_libdarwin_la_HEADERS = breeder.h  checkpoints.h darwin.h evaluator.h gencount.h loadsave.h \
                              operators.h  print_xmgrace.h  statistics.h concentration.h darwin.impl.h \
			      functors.h individual.h minimizergenop.h results.h taboos.h

libopt_la_CPPFLAGS = -I ..  $(AM_CPPFLAGS) 
subdir = darwin
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)

libdarwin_la_LDFLAGS =
libdarwin_la_LIBADD =
am_libdarwin_la_OBJECTS = concentration.lo print_xmgrace.lo
libdarwin_la_OBJECTS = $(am_libdarwin_la_OBJECTS)
bin_PROGRAMS = cedarwin$(EXEEXT) pdarwin$(EXEEXT)
#bin_PROGRAMS = cedarwin$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_cedarwin_OBJECTS = cedarwin-main.$(OBJEXT) cedarwin-ce.$(OBJEXT)
cedarwin_OBJECTS = $(am_cedarwin_OBJECTS)
cedarwin_DEPENDENCIES = libdarwin.la ../lamarck/liblamarck.la \
	../atat/libatat.la
am_pdarwin_OBJECTS = pdarwin-main.$(OBJEXT) pdarwin-pescan.$(OBJEXT)
pdarwin_OBJECTS = $(am_pdarwin_OBJECTS)
pdarwin_DEPENDENCIES = libdarwin.la ../lamarck/liblamarck.la \
	../atat/libatat.la ../vff/libvff.la \
	../pescan_interface/libpescan.la ../physics/libphysics.la

DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/cedarwin-ce.Po \
	./$(DEPDIR)/cedarwin-main.Po \
	./$(DEPDIR)/concentration.Plo \
	./$(DEPDIR)/pdarwin-main.Po \
	./$(DEPDIR)/pdarwin-pescan.Po \
	./$(DEPDIR)/print_xmgrace.Plo
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(libdarwin_la_SOURCES) $(cedarwin_SOURCES) \
	$(pdarwin_SOURCES)
HEADERS = $(nobase_cedarwin_HEADERS) $(nobase_libdarwin_la_HEADERS) \
	$(nobase_pdarwin_HEADERS)

DIST_COMMON = $(nobase_cedarwin_HEADERS) $(nobase_libdarwin_la_HEADERS) \
	$(nobase_pdarwin_HEADERS) Makefile.am Makefile.in
SOURCES = $(libdarwin_la_SOURCES) $(cedarwin_SOURCES) $(pdarwin_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .cc .lo .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  darwin/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" = "$$p" && dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libdarwin.la: $(libdarwin_la_OBJECTS) $(libdarwin_la_DEPENDENCIES) 
	$(CXXLINK)  $(libdarwin_la_LDFLAGS) $(libdarwin_la_OBJECTS) $(libdarwin_la_LIBADD) $(LIBS)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
cedarwin$(EXEEXT): $(cedarwin_OBJECTS) $(cedarwin_DEPENDENCIES) 
	@rm -f cedarwin$(EXEEXT)
	$(CXXLINK) $(cedarwin_LDFLAGS) $(cedarwin_OBJECTS) $(cedarwin_LDADD) $(LIBS)
pdarwin$(EXEEXT): $(pdarwin_OBJECTS) $(pdarwin_DEPENDENCIES) 
	@rm -f pdarwin$(EXEEXT)
	$(CXXLINK) $(pdarwin_LDFLAGS) $(pdarwin_OBJECTS) $(pdarwin_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/cedarwin-ce.Po
include ./$(DEPDIR)/cedarwin-main.Po
include ./$(DEPDIR)/concentration.Plo
include ./$(DEPDIR)/pdarwin-main.Po
include ./$(DEPDIR)/pdarwin-pescan.Po
include ./$(DEPDIR)/print_xmgrace.Plo

distclean-depend:
	-rm -rf ./$(DEPDIR)

.cc.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cc.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

.cc.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=yes \
#	depfile='$(DEPDIR)/$*.Plo' tmpdepfile='$(DEPDIR)/$*.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

cedarwin-main.o: main.cc
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT cedarwin-main.o -MD -MP -MF "$(DEPDIR)/cedarwin-main.Tpo" \
	  -c -o cedarwin-main.o `test -f 'main.cc' || echo '$(srcdir)/'`main.cc; \
	then mv -f "$(DEPDIR)/cedarwin-main.Tpo" "$(DEPDIR)/cedarwin-main.Po"; \
	else rm -f "$(DEPDIR)/cedarwin-main.Tpo"; exit 1; \
	fi
#	source='main.cc' object='cedarwin-main.o' libtool=no \
#	depfile='$(DEPDIR)/cedarwin-main.Po' tmpdepfile='$(DEPDIR)/cedarwin-main.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o cedarwin-main.o `test -f 'main.cc' || echo '$(srcdir)/'`main.cc

cedarwin-main.obj: main.cc
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT cedarwin-main.obj -MD -MP -MF "$(DEPDIR)/cedarwin-main.Tpo" \
	  -c -o cedarwin-main.obj `if test -f 'main.cc'; then $(CYGPATH_W) 'main.cc'; else $(CYGPATH_W) '$(srcdir)/main.cc'; fi`; \
	then mv -f "$(DEPDIR)/cedarwin-main.Tpo" "$(DEPDIR)/cedarwin-main.Po"; \
	else rm -f "$(DEPDIR)/cedarwin-main.Tpo"; exit 1; \
	fi
#	source='main.cc' object='cedarwin-main.obj' libtool=no \
#	depfile='$(DEPDIR)/cedarwin-main.Po' tmpdepfile='$(DEPDIR)/cedarwin-main.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o cedarwin-main.obj `if test -f 'main.cc'; then $(CYGPATH_W) 'main.cc'; else $(CYGPATH_W) '$(srcdir)/main.cc'; fi`

cedarwin-main.lo: main.cc
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT cedarwin-main.lo -MD -MP -MF "$(DEPDIR)/cedarwin-main.Tpo" \
	  -c -o cedarwin-main.lo `test -f 'main.cc' || echo '$(srcdir)/'`main.cc; \
	then mv -f "$(DEPDIR)/cedarwin-main.Tpo" "$(DEPDIR)/cedarwin-main.Plo"; \
	else rm -f "$(DEPDIR)/cedarwin-main.Tpo"; exit 1; \
	fi
#	source='main.cc' object='cedarwin-main.lo' libtool=yes \
#	depfile='$(DEPDIR)/cedarwin-main.Plo' tmpdepfile='$(DEPDIR)/cedarwin-main.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o cedarwin-main.lo `test -f 'main.cc' || echo '$(srcdir)/'`main.cc

cedarwin-ce.o: ce.cc
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT cedarwin-ce.o -MD -MP -MF "$(DEPDIR)/cedarwin-ce.Tpo" \
	  -c -o cedarwin-ce.o `test -f 'ce.cc' || echo '$(srcdir)/'`ce.cc; \
	then mv -f "$(DEPDIR)/cedarwin-ce.Tpo" "$(DEPDIR)/cedarwin-ce.Po"; \
	else rm -f "$(DEPDIR)/cedarwin-ce.Tpo"; exit 1; \
	fi
#	source='ce.cc' object='cedarwin-ce.o' libtool=no \
#	depfile='$(DEPDIR)/cedarwin-ce.Po' tmpdepfile='$(DEPDIR)/cedarwin-ce.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o cedarwin-ce.o `test -f 'ce.cc' || echo '$(srcdir)/'`ce.cc

cedarwin-ce.obj: ce.cc
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT cedarwin-ce.obj -MD -MP -MF "$(DEPDIR)/cedarwin-ce.Tpo" \
	  -c -o cedarwin-ce.obj `if test -f 'ce.cc'; then $(CYGPATH_W) 'ce.cc'; else $(CYGPATH_W) '$(srcdir)/ce.cc'; fi`; \
	then mv -f "$(DEPDIR)/cedarwin-ce.Tpo" "$(DEPDIR)/cedarwin-ce.Po"; \
	else rm -f "$(DEPDIR)/cedarwin-ce.Tpo"; exit 1; \
	fi
#	source='ce.cc' object='cedarwin-ce.obj' libtool=no \
#	depfile='$(DEPDIR)/cedarwin-ce.Po' tmpdepfile='$(DEPDIR)/cedarwin-ce.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o cedarwin-ce.obj `if test -f 'ce.cc'; then $(CYGPATH_W) 'ce.cc'; else $(CYGPATH_W) '$(srcdir)/ce.cc'; fi`

cedarwin-ce.lo: ce.cc
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT cedarwin-ce.lo -MD -MP -MF "$(DEPDIR)/cedarwin-ce.Tpo" \
	  -c -o cedarwin-ce.lo `test -f 'ce.cc' || echo '$(srcdir)/'`ce.cc; \
	then mv -f "$(DEPDIR)/cedarwin-ce.Tpo" "$(DEPDIR)/cedarwin-ce.Plo"; \
	else rm -f "$(DEPDIR)/cedarwin-ce.Tpo"; exit 1; \
	fi
#	source='ce.cc' object='cedarwin-ce.lo' libtool=yes \
#	depfile='$(DEPDIR)/cedarwin-ce.Plo' tmpdepfile='$(DEPDIR)/cedarwin-ce.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(cedarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o cedarwin-ce.lo `test -f 'ce.cc' || echo '$(srcdir)/'`ce.cc

pdarwin-main.o: main.cc
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pdarwin-main.o -MD -MP -MF "$(DEPDIR)/pdarwin-main.Tpo" \
	  -c -o pdarwin-main.o `test -f 'main.cc' || echo '$(srcdir)/'`main.cc; \
	then mv -f "$(DEPDIR)/pdarwin-main.Tpo" "$(DEPDIR)/pdarwin-main.Po"; \
	else rm -f "$(DEPDIR)/pdarwin-main.Tpo"; exit 1; \
	fi
#	source='main.cc' object='pdarwin-main.o' libtool=no \
#	depfile='$(DEPDIR)/pdarwin-main.Po' tmpdepfile='$(DEPDIR)/pdarwin-main.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pdarwin-main.o `test -f 'main.cc' || echo '$(srcdir)/'`main.cc

pdarwin-main.obj: main.cc
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pdarwin-main.obj -MD -MP -MF "$(DEPDIR)/pdarwin-main.Tpo" \
	  -c -o pdarwin-main.obj `if test -f 'main.cc'; then $(CYGPATH_W) 'main.cc'; else $(CYGPATH_W) '$(srcdir)/main.cc'; fi`; \
	then mv -f "$(DEPDIR)/pdarwin-main.Tpo" "$(DEPDIR)/pdarwin-main.Po"; \
	else rm -f "$(DEPDIR)/pdarwin-main.Tpo"; exit 1; \
	fi
#	source='main.cc' object='pdarwin-main.obj' libtool=no \
#	depfile='$(DEPDIR)/pdarwin-main.Po' tmpdepfile='$(DEPDIR)/pdarwin-main.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pdarwin-main.obj `if test -f 'main.cc'; then $(CYGPATH_W) 'main.cc'; else $(CYGPATH_W) '$(srcdir)/main.cc'; fi`

pdarwin-main.lo: main.cc
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pdarwin-main.lo -MD -MP -MF "$(DEPDIR)/pdarwin-main.Tpo" \
	  -c -o pdarwin-main.lo `test -f 'main.cc' || echo '$(srcdir)/'`main.cc; \
	then mv -f "$(DEPDIR)/pdarwin-main.Tpo" "$(DEPDIR)/pdarwin-main.Plo"; \
	else rm -f "$(DEPDIR)/pdarwin-main.Tpo"; exit 1; \
	fi
#	source='main.cc' object='pdarwin-main.lo' libtool=yes \
#	depfile='$(DEPDIR)/pdarwin-main.Plo' tmpdepfile='$(DEPDIR)/pdarwin-main.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pdarwin-main.lo `test -f 'main.cc' || echo '$(srcdir)/'`main.cc

pdarwin-pescan.o: pescan.cc
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pdarwin-pescan.o -MD -MP -MF "$(DEPDIR)/pdarwin-pescan.Tpo" \
	  -c -o pdarwin-pescan.o `test -f 'pescan.cc' || echo '$(srcdir)/'`pescan.cc; \
	then mv -f "$(DEPDIR)/pdarwin-pescan.Tpo" "$(DEPDIR)/pdarwin-pescan.Po"; \
	else rm -f "$(DEPDIR)/pdarwin-pescan.Tpo"; exit 1; \
	fi
#	source='pescan.cc' object='pdarwin-pescan.o' libtool=no \
#	depfile='$(DEPDIR)/pdarwin-pescan.Po' tmpdepfile='$(DEPDIR)/pdarwin-pescan.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pdarwin-pescan.o `test -f 'pescan.cc' || echo '$(srcdir)/'`pescan.cc

pdarwin-pescan.obj: pescan.cc
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pdarwin-pescan.obj -MD -MP -MF "$(DEPDIR)/pdarwin-pescan.Tpo" \
	  -c -o pdarwin-pescan.obj `if test -f 'pescan.cc'; then $(CYGPATH_W) 'pescan.cc'; else $(CYGPATH_W) '$(srcdir)/pescan.cc'; fi`; \
	then mv -f "$(DEPDIR)/pdarwin-pescan.Tpo" "$(DEPDIR)/pdarwin-pescan.Po"; \
	else rm -f "$(DEPDIR)/pdarwin-pescan.Tpo"; exit 1; \
	fi
#	source='pescan.cc' object='pdarwin-pescan.obj' libtool=no \
#	depfile='$(DEPDIR)/pdarwin-pescan.Po' tmpdepfile='$(DEPDIR)/pdarwin-pescan.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pdarwin-pescan.obj `if test -f 'pescan.cc'; then $(CYGPATH_W) 'pescan.cc'; else $(CYGPATH_W) '$(srcdir)/pescan.cc'; fi`

pdarwin-pescan.lo: pescan.cc
	if $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT pdarwin-pescan.lo -MD -MP -MF "$(DEPDIR)/pdarwin-pescan.Tpo" \
	  -c -o pdarwin-pescan.lo `test -f 'pescan.cc' || echo '$(srcdir)/'`pescan.cc; \
	then mv -f "$(DEPDIR)/pdarwin-pescan.Tpo" "$(DEPDIR)/pdarwin-pescan.Plo"; \
	else rm -f "$(DEPDIR)/pdarwin-pescan.Tpo"; exit 1; \
	fi
#	source='pescan.cc' object='pdarwin-pescan.lo' libtool=yes \
#	depfile='$(DEPDIR)/pdarwin-pescan.Plo' tmpdepfile='$(DEPDIR)/pdarwin-pescan.TPlo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(pdarwin_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o pdarwin-pescan.lo `test -f 'pescan.cc' || echo '$(srcdir)/'`pescan.cc

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
nobase_cedarwinHEADERS_INSTALL = $(install_sh_DATA)
install-nobase_cedarwinHEADERS: $(nobase_cedarwin_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(cedarwindir)
	@list='$(nobase_cedarwin_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="$$p"; \
	  echo " $(nobase_cedarwinHEADERS_INSTALL) $$d$$p $(DESTDIR)$(cedarwindir)/$$f"; \
	  $(nobase_cedarwinHEADERS_INSTALL) $$d$$p $(DESTDIR)$(cedarwindir)/$$f; \
	done

uninstall-nobase_cedarwinHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(nobase_cedarwin_HEADERS)'; for p in $$list; do \
	  f="$$p"; \
	  echo " rm -f $(DESTDIR)$(cedarwindir)/$$f"; \
	  rm -f $(DESTDIR)$(cedarwindir)/$$f; \
	done
nobase_libdarwin_laHEADERS_INSTALL = $(install_sh_DATA)
install-nobase_libdarwin_laHEADERS: $(nobase_libdarwin_la_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdarwin_ladir)
	@list='$(nobase_libdarwin_la_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="$$p"; \
	  echo " $(nobase_libdarwin_laHEADERS_INSTALL) $$d$$p $(DESTDIR)$(libdarwin_ladir)/$$f"; \
	  $(nobase_libdarwin_laHEADERS_INSTALL) $$d$$p $(DESTDIR)$(libdarwin_ladir)/$$f; \
	done

uninstall-nobase_libdarwin_laHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(nobase_libdarwin_la_HEADERS)'; for p in $$list; do \
	  f="$$p"; \
	  echo " rm -f $(DESTDIR)$(libdarwin_ladir)/$$f"; \
	  rm -f $(DESTDIR)$(libdarwin_ladir)/$$f; \
	done
nobase_pdarwinHEADERS_INSTALL = $(install_sh_DATA)
install-nobase_pdarwinHEADERS: $(nobase_pdarwin_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(pdarwindir)
	@list='$(nobase_pdarwin_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f="$$p"; \
	  echo " $(nobase_pdarwinHEADERS_INSTALL) $$d$$p $(DESTDIR)$(pdarwindir)/$$f"; \
	  $(nobase_pdarwinHEADERS_INSTALL) $$d$$p $(DESTDIR)$(pdarwindir)/$$f; \
	done

uninstall-nobase_pdarwinHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(nobase_pdarwin_HEADERS)'; for p in $$list; do \
	  f="$$p"; \
	  echo " rm -f $(DESTDIR)$(pdarwindir)/$$f"; \
	  rm -f $(DESTDIR)$(pdarwindir)/$$f; \
	done

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(HEADERS)

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir) $(DESTDIR)$(cedarwindir) $(DESTDIR)$(libdarwin_ladir) $(DESTDIR)$(pdarwindir)
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool \
	clean-noinstLTLIBRARIES mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am: install-nobase_cedarwinHEADERS \
	install-nobase_libdarwin_laHEADERS \
	install-nobase_pdarwinHEADERS

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am \
	uninstall-nobase_cedarwinHEADERS \
	uninstall-nobase_libdarwin_laHEADERS \
	uninstall-nobase_pdarwinHEADERS

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool clean-noinstLTLIBRARIES ctags \
	distclean distclean-compile distclean-depend distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am info \
	info-am install install-am install-binPROGRAMS install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-nobase_cedarwinHEADERS \
	install-nobase_libdarwin_laHEADERS \
	install-nobase_pdarwinHEADERS install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-info-am uninstall-nobase_cedarwinHEADERS \
	uninstall-nobase_libdarwin_laHEADERS \
	uninstall-nobase_pdarwinHEADERS

../atat/libatat.la: 
	cd ../atat; $(MAKE) 
../lamarck/liblamarck.la: 
	cd ../lamarck; $(MAKE)
../physics/libphysics.la:
	cd ../physics; $(MAKE)
../mpi/libmpiobject.la:
	cd ../mpi; $(MAKE)
../mpi/libpescan.la:
	cd ../pescan; $(MAKE)
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
